@page "/"
@using System.Text.RegularExpressions
@using HumJ.Iot.WaveShare_EPaper
@using HumJ.Iot.WaveShare_EPaper.Base
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats.Jpeg
@using SixLabors.ImageSharp.Processing
@using SixLabors.ImageSharp.Processing.Processors.Dithering
@using System.Device.Spi
@using System.Device.Gpio
@using System.Security.Cryptography
@using System.Text
@inject IJSRuntime JS

@code {
    private static List<object> sources = new List<object>();
    private string sourceInput = "";

    private object selected = null!;
    private object status = null!;

    private static SpiDevice spi = SpiDevice.Create(Epd7in3e.SpiConnectionSettings);
    private static GpioController gpio = new GpioController();
    private static Epd7in3 epd = new Epd7in3e(spi, gpio, dc: 25, reset: 24, busy: 23);

    private void AddFile()
    {
        try
        {
            var fi = new FileInfo(sourceInput);
            if (fi.Exists)
            {
                sources.Add(fi);
            }
        }
        catch (Exception ex)
        {
            JS.InvokeVoidAsync("alert", ex.Message);
        }
    }
    private void AddDirectory()
    {
        try
        {
            var di = new DirectoryInfo(sourceInput);
            if (di.Exists)
            {
                sources.AddRange(di.EnumerateFiles("*.jpg"));
                sources.AddRange(di.EnumerateFiles("*.png"));
            }
        }
        catch (Exception ex)
        {
            JS.InvokeVoidAsync("alert", ex.Message);
        }
    }
    private void AddUri()
    {
        try
        {
            var uri = new Uri(sourceInput);
            sources.Add(uri);
        }
        catch (Exception ex)
        {
            JS.InvokeVoidAsync("alert", ex.Message);
        }
    }
    private void Select(object item)
    {
        selected = item;
        _ = ShowImageAsync(selected);
    }

    private Task ShowImageAsync(object item) => item switch
    {
        FileInfo fi => ShowFile(fi),
        Uri uri => ShowUri(uri),
        _ => Task.CompletedTask,
    };
    private async Task ShowFile(FileInfo fi)
    {
        try
        {
            SetStatus("Load");
            var image = await Image.LoadAsync(fi.FullName);

            SetStatus("ShowImage");
            ShowImage(image);

            var nfi = new FileInfo($"./shown/{fi.Name}");
            if (nfi.FullName != fi.FullName)
            {
                Console.WriteLine("CopyFile end");
                nfi.Directory!.Create();
                fi.CopyTo(nfi.FullName,true);
            }
            else { 
                Console.WriteLine("CopyFile none");
            }

            SetStatus("ShowFile end");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
        }
    }
    private async Task ShowUri(Uri uri)
    {
        try
        {
            using var hc = new HttpClient();
            SetStatus("Download");
            var bytes = await hc.GetByteArrayAsync(uri);

            using var image = Image.Load(bytes);
            ShowImage(image);

            SetStatus("SaveImage");
            var md5 = MD5.HashData(bytes);
            var file = new FileInfo($"./shown/{BitConverter.ToString(md5).Replace("-", "")}.jpg");
            file.Directory!.Create();
            await File.WriteAllBytesAsync(file.FullName, bytes.Concat(Encoding.UTF8.GetBytes($"\r\n\r\n{uri}")).ToArray());

            SetStatus("ShowUri end");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
        }
    }
    private void ShowImage(Image image)
    {
        try
        { // if (image.Width < image.Height)
            {
                SetStatus("Rotate");
                image.Mutate(x => x.Rotate(RotateMode.Rotate270));
            }

            //SetStatus ("Contrast");
            //image.Mutate(x => x.Contrast(1.25f));

            //SetStatus ("Saturate");
            //image.Mutate(x => x.Saturate(1.25f));

            SetStatus("Resize");
            image.Mutate(x => x.Resize(new ResizeOptions { Size = new Size(epd.Width, epd.Height), Mode = ResizeMode.Crop }));
            SetStatus("Dither");
            image.Mutate(ctx => ctx.Dither(ErrorDither.FloydSteinberg, epd.Palette));

            SetStatus("Initialize");
            epd.Initialize();

            SetStatus("Display");
            epd.Display(image);

            SetStatus("Sleep");
            epd.Sleep();

            Console.WriteLine("ShowImage end");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
        }
    }

    private void SetStatus(object value)
    {
        status = value;
        InvokeAsync(StateHasChanged);
    }

    private static Task? PlayTask = null;
    private void Play()
    {
        if (PlayTask is not null)
        {
            return;
        }
        else
        {
            PlayTask = Task.Run(async () =>
            {
                while (PlayTask is not null)
                {
                    var index = sources.IndexOf(selected);
                    index += 1;
                    index %= sources.Count;

                    var item = sources[index];
                    Select(item);

                    var targetTime = DateTime.Now.AddSeconds(30);
                    while (PlayTask is not null && DateTime.Now < targetTime)
                    {
                        await Task.Delay(1);
                    }
                }
            });
        }
    }
    private void Stop()
    {
        PlayTask = null;
    }
}

<PageTitle>@status</PageTitle>

<input type="text" @bind-value="sourceInput" />
<br />
<button @onclick="AddFile">AddFile</button>
<button @onclick="AddDirectory">AddDirectory</button>
<button @onclick="AddUri">AddUri</button>
<br />
<button @onclick="sources.Clear">Clear</button>
<button @onclick="()=>{sources=sources.OrderBy(o=>o.ToString()).ToList();}">Order</button>
<button @onclick="()=>{sources=sources.OrderBy(o=>Random.Shared.Next()).ToList();}">Shuffle</button>
<br />
@if (PlayTask is null)
{
    <button @onclick="Play">Play</button>
}
else
{
    <button @onclick="Stop">Stop</button>
}

<hr />

<table>
    <thead>
        <tr>
            <th>Source</th>
            <th>Type</th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var source in sources)
        {
            var item = source;
            <tr class="@(selected==item?"active":"")">
                <td>@item</td>
                <td>@item.GetType().Name</td>
                <td><input id="@item" type="radio" name="selected" @onchange="()=>{Select(item);}" /></td>
            </tr>
        }
    </tbody>
</table>
<style>
    label { display: block; }
    th, td { text-align: start; font-size: 0.75rem; margin: 0; padding: 0 0.25rem; line-height: 1.25rem; }
    tbody tr:hover { background: #EEE; }
    .active { background: #CCF !important; }
</style>